<!doctype html>
<html ng-app="app">
  <head>

      <!--ng-grid
        <link rel="stylesheet" type="text/css" href="http://angular-ui.github.com/ng-grid/css/ng-grid.css" />
        <link rel="stylesheet" type="text/css" href="style.css" />
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"></script>
        <script type="text/javascript" src="http://angular-ui.github.com/ng-grid/lib/ng-grid.debug.js"></script> -->
      
      
      <!-- Bootstrap css-->
      <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>


      <!--ui grid-->
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-touch.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-animate.js"></script>
    <script src="http://ui-grid.info/docs/grunt-scripts/csv.js"></script>
    <script src="http://ui-grid.info/docs/grunt-scripts/pdfmake.js"></script>
    <script src="http://ui-grid.info/docs/grunt-scripts/vfs_fonts.js"></script>
    <script src="http://ui-grid.info/release/ui-grid-unstable.js"></script>
    <link rel="stylesheet" href="http://ui-grid.info/release/ui-grid-unstable.css" type="text/css">
  <!--  <link rel="stylesheet" href="main.css" type="text/css"> -->


      <style type="text/css">
          
        .grid {
    border: 1px solid rgb(212,212,212);
    width: 1330px; 
    height: 550px
}
          .blue { color: blue;  }
          .green { color: #b200ff;  }
          .red { color: #ff6a00;  }
          
</style>
  </head>
  <body>


<div ng-controller="MainCtrl as vm">

    <select ng-options="column.field for column in vm.columnDefs" ng-model="vm.selectedColumn"></select>

    Mapped To ==>
    <select ng-options="column.field for column in vm.columnDefs" ng-model="vm.selectedColumn"></select>

      <button type="button" class="btn btn-success" ng-click="hideGrid = !hideGrid">
        {{ hideGrid && 'Hide' || 'Show' }} Template
      </button>
    
      <div class="well" ng-hide="!hideGrid">
  <div ui-grid="gridOptions" ui-grid-importer class="grid" ui-grid-edit ui-grid-row-edit ui-grid-selection ui-grid-exporter class="grid"  ui-grid-pinning></div>
</div>

    </div>


    <script type="text/javascript">

        var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid', 'ui.grid.importer', 'ui.grid.rowEdit', 'ui.grid.edit', 'ui.grid.selection', 'ui.grid.exporter', 'ui.grid.pinning']);
        app.controller('MainCtrl', ['$scope', '$http', '$interval', '$q', function ($scope, $http, $interval, $q) {
            var self = this;
            self.columnDefs = [
                { field: 'SKU', displayName: 'SKU', width: 190, pinnedLeft: true, headerCellClass: 'blue' },
                { field: 'Product_Name', displayName: 'Product Name', width: 150, pinnedRight: true, headerCellClass: 'green' },
                { field: 'Product_Id', displayName: 'Product_Id', width: 120, pinnedRight: true, headerCellClass: 'green' },
                { field: 'MRP', displayName: 'MRP', width: 130, pinnedLeft: true, headerCellClass: 'blue' },
                { field: 'Price', displayName: 'Price', width: 130, pinnedLeft: true, headerCellClass: 'blue' }
               , { field: 'Quantity', displayName: 'Quantity', width: 120, headerCellClass: 'red' },
               { field: 'Category', displayName: 'Category', width: 120, headerCellClass: 'red' },
                { field: 'Color', displayName: 'Color', width: 150, headerCellClass: 'red' },
                { field: 'Size', displayName: 'Size', width: 100, headerCellClass: 'red', editableCellTemplate: 'ui-grid/dropdownEditor', editDropdownValueLabel: 'Size',
                    editDropdownOptionsArray: [
                    { id: 1, Size: 'L' },
                    { id: 2, Size: 'XL' }
            ]
                }
               , { field: 'Product_Description', displayName: 'Product_Description', width: 250, headerCellClass: 'red' }
                  ];
            $scope.data = [];

            self.columnDefs1 =[{ field: 'SKU', displayName: 'SKU', width: 190, pinnedLeft: true, headerCellClass: 'blue' },
                { field: 'Product_Name', displayName: 'Product Name', width: 150, pinnedRight: true, headerCellClass: 'green' },
                { field: 'Product_Id', displayName: 'Product_Id', width: 120, pinnedRight: true, headerCellClass: 'green' },
                { field: 'MRP', displayName: 'MRP', width: 130, pinnedLeft: true, headerCellClass: 'blue' },
                { field: 'Price', displayName: 'Price', width: 130, pinnedLeft: true, headerCellClass: 'blue' }
               , { field: 'Quantity', displayName: 'Quantity', width: 120, headerCellClass: 'red' },
               { field: 'Category', displayName: 'Category', width: 120, headerCellClass: 'red' },
                { field: 'Color', displayName: 'Color', width: 150, headerCellClass: 'red' },
                { field: 'Size', displayName: 'Size', width: 100, headerCellClass: 'red', editableCellTemplate: 'ui-grid/dropdownEditor', editDropdownValueLabel: 'Size',
                    editDropdownOptionsArray: [
                    { id: 1, Size: 'L' },
                    { id: 2, Size: 'XL' }
            ]
                }
                ,{
      field: 'dude',
      displayName: 'Dude'
    }

               , { field: 'Product_Description', displayName: 'Product_Description', width: 250, headerCellClass: 'red' }
                  ];





                   $scope.columnDefs2 =[{ field: 'SKU', displayName: 'SKU'},
                { field: 'Product_Name', displayName: 'Product Name'}
                
                  ];

                   $scope.columnDefs3 = [{ field:"name", displayName: "NAME"},
                                   { field:"age", displayName: "AGE"}];

            $scope.cellT = 'input type="checkbox" ng-model="row.entity.dude" ng-click="toggle(row.entity.name,row.entity.dude)"';
           
            $scope.gridOptions = {
                enableGridMenu: true,
                enableSelectAll: true,
                exporterCsvFilename: 'myFile.csv',
                data: 'data',
                columnDefs:'columnDefs3',
                exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
                enableColResize: true,

                

                importerDataAddCallback: function (grid, newObjects) {

                    if (confirm("Press a button!") == true) {
                        x = "You pressed OK!";
                    } else {
                        x = "You pressed Cancel!";

                        $scope.data = $scope.data.concat(newObjects);
                    }
                },
                onRegisterApi: function (gridApi) {
                    $scope.gridApi = gridApi;
                    gridApi.rowEdit.on.saveRow($scope, $scope.saveRow);
                }

            };
            $scope.toggle = function(name, value) {
    //do something usefull here, you have the name and the new value of dude 
    alert(name + ':' + value);
  }

            $scope.saveRow = function (rowEntity) {
                // create a fake promise - normally you'd use the promise returned by $http or $resource
                var promise = $q.defer();

                $scope.gridApi.rowEdit.setSavePromise(rowEntity, promise.promise);

                // fake a delay of 1 seconds whilst the save occurs, return error if Price > Mrp
                $interval(function (ss) {

                    if (rowEntity.MRP < rowEntity.Price) {
                        promise.reject();
                    }
                    else if (rowEntity.Size !== 'L' & rowEntity.Size !== 'XL' & rowEntity.Size !== 'M' & rowEntity.Size !== 'XXL') {
                        promise.reject();
                    }
                    else {
                        promise.resolve();
                    }





                }

                , 1000, 1);



                $interval(function (ssb) {
                    if (rowEntity.Size !== 'L' & rowEntity.Size !== 'XL' & rowEntity.Size !== 'M' & rowEntity.Size !== 'XXL') {
                        promise.reject();
                    } else {
                        promise.resolve();
                    }
                }

              , 1000, 1);


            };



        } ]);
    </script>

  </body>
</html>